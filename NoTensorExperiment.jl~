using GPT_SGLD
using DataFrames
using PyPlot

@everywhere data=DataFrames.readtable("Folds5x2_pp.csv", header = true);
@everywhere data = convert(Array,data);
@everywhere N=size(data,1);
@everywhere D=4;
@everywhere Ntrain=5000;
@everywhere seed=17;
@everywhere length_scale=1.4332;
@everywhere sigma=0.2299;
@everywhere Xtrain = data[1:Ntrain,1:D];
@everywhere ytrain = data[1:Ntrain,D+1];
@everywhere XtrainMean=mean(Xtrain,1); 
@everywhere XtrainStd=zeros(1,D);
@everywhere for i=1:D
	    XtrainStd[1,i]=std(Xtrain[:,i]);
	    end
@everywhere ytrainMean=mean(ytrain);
@everywhere ytrainStd=std(ytrain);
@everywhere Xtrain = datawhitening(Xtrain);
@everywhere ytrain= datawhitening(ytrain);
@everywhere Xtest = (data[Ntrain+1:end,1:D]-repmat(XtrainMean,N-Ntrain,1))./repmat(XtrainStd,N-Ntrain,1);
@everywhere ytest = (data[Ntrain+1:end,D+1]-ytrainMean)/ytrainStd;
@everywhere maxepoch=5;
@everywhere m=50;
@everywhere n=150;
@everywhere phitrain=featureNotensor(Xtrain,n,length_scale,seed);
@everywhere phitest=featureNotensor(Xtest,n,length_scale,seed);
@everywhere eps_theta=0.01;

if 1==1
    tic(); theta_store=GPNT_SGLD(phitrain,ytrain,sigma,m,eps_theta,maxepoch); toc();
    T=size(theta_store,2);
    trainRMSE=Array(Float64,T);
    testRMSE=Array(Float64,T);
    for i=1:T
        fhat_train=phitrain'*theta_store[:,i];
        trainRMSE[i]=ytrainStd*sqrt(sum((fhat_train-ytrain).^2)/Ntrain)
        fhat_test=phitest'*theta_store[:,i];
        testRMSE[i]=ytrainStd*sqrt(sum((fhat_test-ytest).^2)/(N-Ntrain));
    end
    plot(trainRMSE)
    plot(testRMSE)
end
