{
    "contents" : "\nN = 30;sigma=0.5;sigmaRBF = 5;\nseq_train = seq(0.5,by=1,length.out=N);seq_test = sort(N*runif(N/4))\nX_train = cbind(rep(seq_train,N),rep(seq_train,each=N))\nX_test = cbind(rep(seq_test,N/4),rep(seq_test,each=N/4))\nf = GPdraw(rbind(X_train,X_test),sigmaRBF,1)\ny = f + sigma*rnorm(length(f))\ny_train = y[1:nrow(X_train)]\nf_test = tail(f,nrow(X_test))\n##################################################################################################################\npersp3D(seq_train,seq_train,matrix(f,N,N),theta = 50, phi = 30, \n        expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=\"GP draw\")\n\npersp3D(seq_test,seq_test,matrix(f_test,N/2,N/2),theta = 50, phi = 30, \n        expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=\"GP draw\")\n\nn=100;generator=123;q=0.1;num_iterations=30;burnin=25;r=30\n# out3 = tensor_inf(X_train,y_train,sigma,n,r=50,sigmaRBF,q=0.01,generator,num_iterations=10,burnin)\nout1 = Gauss_inf(X_train,y_train,sigma,n,r,sigmaRBF,q=0.1,generator,num_iterations,burnin)\n\n\nn_vec = c(50,100,150)\nr_vec = c(1/3,1/2,1)\nq_vec = c(1/3,1/2,1)\ngenerator=123;num_iterations=8;burnin=6;\n\nlibrary(parallel)\nlibrary(doParallel)\nregisterDoParallel(cores=8)\nnumWorkers <- 8\n\nRMSE_train = array(,c(length(n_vec),length(r_vec),length(q_vec)));RMSE_test = array(,c(length(n_vec),length(r_vec),length(q_vec)))\nfor (i in 1:3){\n  n = n_vec[i]\n  Phi_train = apply(X_train,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_train))),2)) })\n  Phi_test = apply(X_test,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_test))),2)) })\n \n  out <- foreach(j=1:length(r_vec), .combine=cbind) %dopar% {\n    r = round(n*r_vec[j])\n    \n    workerFunc = function(q) {Gauss_inf(X_train,y_train,sigma,n,r,sigmaRBF,q,generator,num_iterations,burnin)[num_iterations,]}\n    cl <- makeCluster(numWorkers, type = \"PSOCK\")\n    clusterExport(cl,list(\"Gauss_inf\",\"alply\",\"feature\"))\n    clusterExport(cl=cl, varlist=c(\"X_train\", \"y_train\", \"sigma\", \"n\",\"r\", \"sigmaRBF\",\"generator\",\"num_iterations\",\"burnin\"), envir=environment())\n    res <- Reduce(cbind,parLapply(cl, q_vec, workerFunc))\n    \n    append(sqrt(colSums((t(Phi_train) %*% res - f[1:nrow(X_train)])^2)/nrow(X_train)),\n    sqrt(colSums((t(Phi_test) %*% res - f_test)^2)/nrow(X_test)) )\n  }\n}\nstopCluster(cl)\n\npar(mfrow=c(1,2))\nplot(q_vec,RMSE_test[1,1,],type=\"n\",ylim=c(0.14,0.17),main=\"RMSE on test set when n=50\",xlab=\"q\")\nfor (i in 1:3) {lines(q_vec,RMSE_test[1,i,],col=i)}; abline(h=round(RMSE1,3),col=4)\nlegend(\"topright\",c(\"r=1/3\",\"r=2/3\",\"r=1\"), lwd=c(2,2,2),col=1:3); text(0.5,0.142,paste(\"RMSE exact = \",round(RMSE1,3)))\n\nplot(q_vec,RMSE_train[1,1,],type=\"n\",ylim=c(0.12,0.17),main=\"RMSE on training set when n=50\",xlab=\"q\")\nfor (i in 1:3) {lines(q_vec,RMSE_train[1,i,],col=i)}; abline(h=round(RMSE2,3),col=4)\nlegend(\"topright\",c(\"r=1/3\",\"r=2/3\",\"r=1\"), lwd=c(2,2,2),col=1:3);text(0.5,0.125,paste(\"RMSE exact = \",round(RMSE2,3)))\n\n\n# library(parallel)\n# numWorkers <- 8\n# \n# RMSE_train = array(,c(length(n_vec),length(r_vec),length(q_vec)));RMSE_test = array(,c(length(n_vec),length(r_vec),length(q_vec)))\n# for (i in 1:3){\n#   n = n_vec[i]\n#   Phi_train = apply(X_train,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_train))),2)) })\n#   Phi_test = apply(X_test,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_test))),2)) })\n#   for (j in 1:length(r_vec)){\n#     r = round(n*r_vec[j])\n#     \n#     workerFunc = function(q) {Gauss_inf(X_train,y_train,sigma,n,r,sigmaRBF,q,generator,num_iterations,burnin)[num_iterations,]}\n#     cl <- makeCluster(numWorkers, type = \"PSOCK\")\n#     clusterExport(cl,list(\"Gauss_inf\",\"alply\",\"feature\"))\n#     clusterExport(cl=cl, varlist=c(\"X_train\", \"y_train\", \"sigma\", \"n\",\"r\", \"sigmaRBF\",\"generator\",\"num_iterations\",\"burnin\"), envir=environment())\n#     res <- Reduce(cbind,parLapply(cl, q_vec, workerFunc))\n#     stopCluster(cl)\n#     \n#     RMSE_train[i,j,] = sqrt(colSums((t(Phi_train) %*% res - f[1:nrow(X_train)])^2)/nrow(X_train))\n#     RMSE_test[i,j,] =   sqrt(colSums((t(Phi_test) %*% res - f_test)^2)/nrow(X_test))\n#     print(paste(\"j= \", j))\n#   }\n#   print(paste(\"i= \", i))\n# }\n\n\n\nRMSE_train = array(,c(length(n_vec),length(r_vec),length(q_vec)));RMSE_test = array(,c(length(n_vec),length(r_vec),length(q_vec)))\nfor (i in 1:3){\n  n = n_vec[i]\n  Phi_train = apply(X_train,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_train))),2)) })\n  Phi_test = apply(X_test,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_test))),2)) })\n  for (j in 1:length(r_vec)){\n    r = round(n*r_vec[j])\n    res = list()\n    for (k in 1:3){\n      q = q_vec[k]\n      res[[k]] = Gauss_inf(X_train,y_train,sigma,n,r,sigmaRBF,q,generator,num_iterations,burnin)\n      RMSE_train[i,j,k] = sqrt(colSums((t(Phi_train) %*% res[[k]][num_iterations,] - f[1:nrow(X_train)])^2)/nrow(X_train))\n      RMSE_test[i,j,k] =   sqrt(colSums((t(Phi_test) %*% res[[k]][num_iterations,] - f_test)^2)/nrow(X_test))\n      print(paste(\"k= \", k))\n    }\n    print(paste(\"j= \", j))\n  }\n  print(paste(\"i= \", i))\n}\n}\n\n\n\n#training RMSE\nPhi_vec = apply(X_train,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_train))),2)) })\nplot(f[1:nrow(X_train)],type=\"l\",main=paste(\"n=\",n, \", r= \", r),ylim=c(-4,3));\nRMSE_train2=c()\nfor (i in 1:22){\n  f_fit = t(Phi_vec) %*% res[i,]\n#   lines(f_fit,col=i+1)\n  RMSE_train2[i] = sqrt(sum((f_fit-f[1:nrow(X_train)])^2)/nrow(X_train))\n}\n#test RMSE\nPhi_vec = apply(X_test,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X_test))),2)) })\nplot(f_test,type=\"l\",main=paste(\"n=\",n, \", r= \", r),ylim=c(-4,3));\nRMSE_test2=c()\nfor (i in 1:22){\n  f_fit = t(Phi_vec) %*% res[i,]\n  lines(f_fit,col=i+1)\n  RMSE_test2[i] = sqrt(sum((f_fit-f_test)^2)/nrow(X_test))\n}\n\npar(mfrow=c(1,2))\nplot(2:22,RMSE_train1[2:22],type=\"l\",xlab=\"number of iterations\",main=\"RMSE_train for r=30, q=2/3\",ylim=c(0.11,0.16));\nlines(2:22,RMSE_train2[2:22],col=3)\nabline(h=RMSE2,col=2);text(8,0.12,paste(\"RMSE exact = \",round(RMSE2,3)),col=2)\nlegend(\"topright\",c(\"n=100\",\"n=50\"),col=c(1,3),lwd=c(2,2))\nplot(2:22,RMSE_test1[2:22],type=\"l\",xlab=\"number of iterations\",main=\"RMSE_test for r=30, q=2/3\",ylim=c(0.09,0.15));\nlines(2:22,RMSE_test2[2:22],col=3)\nabline(h=RMSE1,col=2);text(8,0.096,paste(\"RMSE exact = \",round(RMSE1,3)),col=2)\nlegend(\"topright\",c(\"n=100\",\"n=50\"),col=c(1,3),lwd=c(2,2))\n\n\n\n\n\nq_vec = c(0.01,0.05,0.1,0.2,0.5,1);RMSE_150 = c()\nfor (i in 1:length(q_vec)){\n  q = q_vec[i]\n  out5 = theta_inf(X_train,y_train,sigma,n,sigmaRBF,q,generator)\n  f_fit = t(Phi_vec) %*% out5\n  RMSE_150[i] = sqrt(sum((f_fit-f_test)^2)/nrow(X_test))\n  print(i)\n}\nplot(q_vec,RMSE_50,type=\"l\")\n\n\n\n######################################GP EXACT#####################################################\nKernel = function(x,y,sigmaRBF) {\n  tmp = matrix(1,nrow(x),nrow(y))\n  for (i in 1:nrow(x)) {\n    for (j in 1:nrow(y)){\n      tmp[i,j] = exp(-1/(2*sigmaRBF^2)*(t(x[i,]-y[j,])%*%(x[i,]-y[j,])))\n    }\n  } \n  return(tmp)\n}\n\n\npos_ker =  Kernel(X_test,X_train,sigmaRBF)\npos_tmp =  pos_ker %*% solve(Kernel(X_train,X_train,sigmaRBF) + sigma^2 * diag(nrow(X_train)))\npos_mean = pos_tmp %*% y_train\npos_cov =  Kernel(X_test,X_test,sigmaRBF) -pos_tmp %*% t(pos_ker)\n\nplot(f_test,type=\"l\")\nlines(pos_mean,col=3)\nRMSE1 = sqrt(sum((pos_mean-f_test)^2)/nrow(X_test))\nRMSE2 = sqrt(sum((pos_mean-f[1:nrow(X_train)])^2)/nrow(X_train))\n\n\n\n\n# kernelRBF = function(x,y)  exp(-1/(2*sigmaRBF^2)*(t(x-y)%*%(x-y)))\n# nr = nrow(X)\n# cov = matrix(0,nr,nr)\n# for (i in 1:nr){\n#   for (j in i:nr){\n#     cov[i,j] = kernelRBF(X[i,],X[j,])\n#   }\n# }\n# K = cov + t(cov) - diag(nr)\n# \n\n\n\n\n\n\n\n\n\n\n\n\n\nn_vec = c(50,80,100,150)\nr_vec = c(1/4,1/2,3/4,1)\nq_vec = c(0.1,0.4,0.7,1)\n\nf_array = array(,c(N^ncol(X),length(n_vec),length(r_vec),length(q_vec)));RMSE_array = array(,c(length(n_vec),length(r_vec),length(q_vec)))\nfor (i in 3:3){\n  n = n_vec[i]\n  Phi_vec = apply(X_test,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X))),2)) })\n  for (j in 1:length(r_vec)){\n    r = round(n*r_vec[j])\n      for (k in 1:3){\n        q = q_vec[k]\n        theta = tensor_inf(X,y,sigma,n,r,sigmaRBF,q,generator,num_iterations,burnin)[num_iterations,]\n        f_array[,i,j,k] = t(Phi_vec) %*% theta\n        RMSE_array[i,j,k] = sqrt(sum((f_array[,i,j,k]-fX)^2)/nrow(X))\n      }\n    }\n  }\n}\n\n\n\n\n\n\npar(mfrow=c(1,2))\npar(mar=rep(5,4))\n\nPhi_vec = apply(X,1,function(x){Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X))),2)) })\npersp3D(sequence,sequence,matrix(fX,N,N),theta = 50, phi = 30, \n        expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=\"GP draw\")\n\nplot(fX,type=\"l\",main=paste(\"n=\",n, \", r= \", r),ylim=c(-4,3));\nRMSE=c()\nfor (i in 1:num_iterations){\n   f_fit = t(Phi_vec) %*% f_array[i,]\n   persp3D(sequence,sequence,matrix(f_array[,i,j,k],N,N),theta = 50, phi = 30,\n           expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=paste(\"fitted GP when n=\",n,\", r=\",r_vec[i],\" ,q=\",q))\n   lines(f_fit,col=i+1)\n   RMSE[i] = sqrt(sum((f_fit-fX)^2)/nrow(X))\n}\n\npersp3D(sequence,sequence,matrix(pos_mean,N,N),theta = 50, phi = 30,\n        expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=\"fitted GP using traditional method\")\n\n\nplot(r_vec[1:4],RMSE[1:4],type=\"l\",main=\"RMSE vs r when n=100, q=0.1\",xlab=\"r\")\n\n##fix q\npar(mfrow=c(2,2))\nfor (k in 1:length(q_vec)){\n  plot(r_vec,RMSE_array[1,,k],type=\"n\",ylim=c(0.1,max(RMSE_array[1,,k])),xlab=\"r as a percentage of n\",ylab=\"RMSE\",\n       main=paste(\"RMSE on a 50*50 grid for q= \",q_vec[k]))\n  for (i in 1:4) {lines(r_vec,RMSE_array[i,,k],col=i)}; \n  abline(h=RMSE1,col=6); text(0.35,0.1,paste(\"RMSE_exact= \", round(RMSE1,2)))\n  legend(\"topright\",c(paste(\"n= \",n_vec)),col=1:4,lwd=rep(1,4))\n}\n\n#fix r\npar(mfrow=c(2,2))\nfor (j in 1:length(r_vec)){\n  plot(q_vec,RMSE_array[1,j,],type=\"n\",ylim=c(0.1,max(RMSE_array[1,j,])),xlab=\"q\",ylab=\"RMSE\",\n       main=paste(\"RMSE on a 50*50 grid for r= \",r_vec[j]))\n  for (i in 1:4) {lines(q_vec,RMSE_array[i,j,],col=i)}; \n  abline(h=RMSE1,col=6); text(0.35,0.1,paste(\"RMSE_exact= \", round(RMSE1,2)))\n  legend(\"topright\",c(paste(\"n= \",n_vec)),col=1:4,lwd=rep(1,4))\n}\n\n#fix n\npar(mfrow=c(2,2))\nfor (i in 1:length(n_vec)){\n  plot(q_vec,RMSE_array[i,1,],type=\"n\",ylim=c(0.1,max(RMSE_array[i,1,])),xlab=\"q\",ylab=\"RMSE\",\n       main=paste(\"RMSE on a 50*50 grid for n= \",n_vec[i]))\n  for (j in 1:4) {lines(r_vec,RMSE_array[i,j,],col=i)}; \n  abline(h=RMSE1,col=6); text(0.35,0.1,paste(\"RMSE_exact= \", round(RMSE1,2)))\n  legend(\"topright\",c(paste(\"r= \",r_vec)),col=1:4,lwd=rep(1,4))\n}\n##surface plot\nsaveGIF({\n  ani.options(interval = 0.5)\n\n  par(bg = \"white\") \n  split.screen(c(1,2)) # split display into two screens\n  screen(1) # prepare screen 1 for output\n  persp3D(sequence,sequence,matrix(fX,N,N),theta = 50, phi = 30, \n          expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=\"GP draw\")\n  \n  screen(2) # prepare screen 1 for output\n  for (i in 1:5) {\n    f_fit = t(Phi_vec) %*% Theta_varyr[,,1][i,]\n    persp3D(sequence,sequence,matrix(f_fit,N,N),theta = 50, phi = 30,\n          expand = 0.5,xlab=\"x\",ylab=\"y\",zlab=\"z\",main=paste(\"fitted GP when n=\",n,\", r=\",30,\" ,q=\",q))\n    ani.pause()\n  }\n}, img.name = \"sur_plot\",autoplay = FALSE, interval = 0.5, movie.name = \"surface.gif\")\n\n\n\n# ,col=rgb(1, 1, 1, 0.5)\n# \n\n\n# func = function(x) {Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X))),2)) %*% Theta}\n# f_fit = apply(X,1,func)\n\n\n# \n# ##profiling\n# Rprof(\"prof.out\")\n# x = profr(tensor_inf(X,y,sigma,n=10,r=10,sigmaRBF,q=0.5,generator=1,num_iterations=50,burnin=10))\n# Rprof(NULL)\n# ggplot.profr(parse_rprof(\"prof.out\"))\n\n# par(mfrow=c(2,3))\n# nvec= c(10,30,50,70,100)\n# for (i in 1:5) {\n#   n = nvec[i];r=n\n#   Theta = tensor_inf(X,y,sigma,n,r,sigmaRBF,q=0.5,generator,num_iterations=50,burnin=10)\n#   func = function(x) {Reduce(kronecker,alply(array(feature(x,n,sigmaRBF,generator),c(n,ncol(X))),2)) %*% Theta}\n#   f_fit = apply(X,1,func)\n#   plot(fX,type=\"l\",main=paste(\"n=\",n, \", r= \", r));lines(f_fit,col=2)\n#   theta_list[[i]] = Theta\n# }\n##compare with traditional way\n# kernelRBF = function(x,y)  exp(-1/(2*sigmaRBF^2)*(t(x-y)%*%(x-y)))\n# nr = nrow(X)\n# cov = matrix(0,nr,nr)\n# for (i in 1:nr){\n#   for (j in i:nr){\n#     cov[i,j] = kernelRBF(X[i,],X[j,])\n#   }\n# }\n# K = cov + t(cov) - diag(nr)\n# \n",
    "created" : 1432250344367.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "50460482",
    "id" : "E09D35C3",
    "lastKnownWriteTime" : 1432283611,
    "path" : "C:/Users/Xiaoyu Lu/Dropbox/GP/GPT-master/demo/inf_demo1.R",
    "project_path" : "demo/inf_demo1.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}